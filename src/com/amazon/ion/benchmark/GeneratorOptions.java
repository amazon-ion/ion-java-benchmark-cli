package com.amazon.ion.benchmark;

import com.amazon.ion.IonType;

import java.util.List;
import java.util.Map;

/**
 * Decide which data generating method should be executed based on the specifications in the HashMap.
 */
public class GeneratorOptions {
    /**
     * Call the relevant methods which can generate scalar type of Ion data based on the input hashmap.
     * @param optionsMap is the hash map which generated by the command line parser which match the option name and its value appropriately.
     * @throws Exception if errors occurs when calling the methods of generating Ion data.
     */
    public static void executeGenerator(Map<String, Object> optionsMap) throws Exception {
        int size = Integer.parseInt(optionsMap.get("--data-size").toString());
        String expRange = optionsMap.get("--decimal-exponent-range").toString();
        String coefficientDigits = optionsMap.get("--decimal-coefficient-digit-range").toString();
        String format = ((List<String>) optionsMap.get("--format")).get(0);
        String path = optionsMap.get("<output_file>").toString();
        String range = optionsMap.get("--text-code-point-range").toString();
        String timestampTemplate;

        if (optionsMap.get("--timestamps-template") == null) {
            timestampTemplate = null;
        } else {
            timestampTemplate = optionsMap.get("--timestamps-template").toString();
        }

        if (optionsMap.get("--data-type") != null) {
            IonType type = IonType.valueOf(optionsMap.get("--data-type").toString().toUpperCase());
            switch (type) {
                case TIMESTAMP:
                    WriteRandomIonValues.writeRandomTimestamps(size, type, path, timestampTemplate, format);
                    break;
                case STRING:
                    WriteRandomIonValues.writeRandomStrings(size, type, path, range, format);
                    break;
                case DECIMAL:
                    WriteRandomIonValues.writeRandomDecimals(size, type, path, format, expRange, coefficientDigits);
                    break;
                case INT:
                    WriteRandomIonValues.writeRandomInts(size, type, format, path);
                    break;
                case FLOAT:
                    WriteRandomIonValues.writeRandomFloats(size, type, format, path);
                    break;
                case BLOB:
                case CLOB:
                    WriteRandomIonValues.writeRandomLobs(size, type, format, path);
                    break;
                case SYMBOL:
                    WriteRandomIonValues.writeRandomSymbolValues(size, format, path);
                    break;
                default:
                    throw new IllegalStateException("Unexpected value: " + type);
            }
        }
    }
}
